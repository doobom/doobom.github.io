<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>oops: run - nginx</title><link href="/" rel="alternate"></link><link href="/feeds/nginx.atom.xml" rel="self"></link><id>/</id><updated>2020-02-10T10:56:00+08:00</updated><subtitle>keep running...</subtitle><entry><title>How to Install and Configure Askbot with Nginx on CentOS 7</title><link href="/how-to-install-and-configure-askbot-with-nginx-on-centos-7" rel="alternate"></link><published>2020-02-10T10:56:00+08:00</published><updated>2020-02-10T10:56:00+08:00</updated><author><name>doobom</name></author><id>tag:None,2020-02-10:/how-to-install-and-configure-askbot-with-nginx-on-centos-7</id><summary type="html">&lt;p&gt;Askbot is an open source software for creating Q&amp;amp;A forums based on Python Django Framework. It&amp;#8217;s basically a Q&amp;amp;A system like StackOverflow, Yahoo Answers, and others. Created by Mike Chan and Sailing Cai on 2009, and it&amp;#8217;s easy to install and configure on Linux systems like Ubuntu and CentOS. Many large open source software projects like Fedora and LibreOffice are using&amp;nbsp;it.&lt;/p&gt;</summary><content type="html">
&lt;blockquote&gt;
&lt;p&gt;原文: &lt;a href="https://www.howtoforge.com/tutorial/how-to-install-and-configure-askbot-with-nginx-on-centos-7/"&gt;How to Install and Configure Askbot with Nginx on CentOS 7&lt;/a&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Askbot is an open source software for creating Q&amp;amp;A forums based on Python Django Framework. It’s basically a Q&amp;amp;A system like StackOverflow, Yahoo Answers, and others. Created by Mike Chan and Sailing Cai on 2009, and it’s easy to install and configure on Linux systems like Ubuntu and CentOS. Many large open source software projects like Fedora and LibreOffice are using it.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will show you how to install Askbot Python Django application using uWSGI and Nginx web server on CentOS 7 system. As for database, we will be using PostgreSQL for Askbot installation.&lt;/p&gt;
&lt;h1 id="what-we-will-do"&gt;What we will do&lt;a class="headerlink" href="#what-we-will-do" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Install dependencies&lt;/li&gt;
&lt;li&gt;Install and configure PostgreSQL&lt;/li&gt;
&lt;li&gt;Install and configure Askbot&lt;/li&gt;
&lt;li&gt;Install and configure uWSGI&lt;/li&gt;
&lt;li&gt;Install and configure Nginx Webserver&lt;/li&gt;
&lt;li&gt;Test the setup&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="prerequisites"&gt;Prerequisites&lt;a class="headerlink" href="#prerequisites" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;CentOS 7 Server&lt;/li&gt;
&lt;li&gt;Root privileges&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="step-1-install-dependencies"&gt;Step 1 - Install dependencies&lt;a class="headerlink" href="#step-1-install-dependencies" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this step, we will install some packages that are needed for successful Askbot installation. These include ‘Development Tools’, Epel repository, and some python-related tools (for managing Python packages). So let’s begin.&lt;/p&gt;
&lt;p&gt;First, install CentOS ‘Development Tools’ with yum group command below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum group install &lt;span class="s1"&gt;'Development Tools'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then install the Epel repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum -y install epel-release&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally install the python packages, including python pip, python-devel and python six.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum -y install python-pip python-devel python-six&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Installing python" src="images/7002-1.png"/&gt;&lt;/p&gt;
&lt;h1 id="step-2-install-and-configure-postgresql"&gt;Step 2 - Install and configure PostgreSQL&lt;a class="headerlink" href="#step-2-install-and-configure-postgresql" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Now we need PostgreSQL database, which is available in the CentOS repository. In this section, we will discuss how you can install PostgreSQL database, change the postgres password user, create a new user and database for the Askbot installation, and finally, change the postgres authentication config.&lt;/p&gt;
&lt;p&gt;So let’s start with installing PostgreSQL from the repository using the yum command below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum -y install postgresql-server postgresql-devel postgresql-contrib&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the installation is complete, we need to initialize the database, which you can do using the command below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;postgresql-setup initdb&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Moving on, start postgres and enable it to launch automatically at the boot time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl start postgresql&lt;/span&gt;
&lt;span class="code-line"&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; postgresql&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, the PostgreSQL database should be installed. Next, we need to reset the postgres user password. For this, first login as ‘postgres’ user and access the psql command line tool.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;su - postgres&lt;/span&gt;
&lt;span class="code-line"&gt;psql&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then give the postgres user a new password.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="se"&gt;\p&lt;/span&gt;assword postgres&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, create a new database and user for Askbot. For example, we want to create a new user ‘&lt;strong&gt;hakaselabs&lt;/strong&gt;‘ with password ‘&lt;strong&gt;hakase123&lt;/strong&gt;‘, and the database named ‘&lt;strong&gt;askbotdb&lt;/strong&gt;‘. The following postgres queries will help us create all of these.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;create database askbotdb&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;create user hakaselabs with password &lt;span class="s1"&gt;'hakase123'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;grant all privileges on database askbotdb to hakaselabs&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Install PostgreSQL" src="images/7002-2.png"/&gt;&lt;/p&gt;
&lt;p&gt;So now, a database and user for Askbot installation have been created. The next step is to edit the postgres configuration for authentication setup, which you can do by heading to the ‘pgsql/data’ directory and editing the ‘pg_hba.conf’ file with vim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /var/lib/pgsql/data/&lt;/span&gt;
&lt;span class="code-line"&gt;vim pg_hba.conf&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once inside the file, change all authentication to md5, as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;local   all             all                                     md5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; # IPv4 local connections:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; host    all             all             127.0.0.1/32            md5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; # IPv6 local connections:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; host    all             all             ::1/128                 md5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Configure PostgreSQL" src="images/7002-3.png"/&gt;&lt;/p&gt;
&lt;p&gt;Now, save and exit the file, and then restart the postgres service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl restart postgresql&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So by now, the PostgreSQL database has been installed; database for the Askbot installation has been created; and the postgres user authentication method has been changed to md5.&lt;/p&gt;
&lt;h1 id="step-3-install-and-configure-askbot"&gt;Step 3 - Install and configure Askbot&lt;a class="headerlink" href="#step-3-install-and-configure-askbot" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In this step, we will discuss the installation and configuration of Askbot. We will install Askbot under a user named ‘askbot’, and using the virtualenv python. So let’s begin.&lt;/p&gt;
&lt;p&gt;Firstly, create a new user ‘askbot’ and give the user a new password.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;useradd -m -s /bin/bash askbot&lt;/span&gt;
&lt;span class="code-line"&gt;passwd askbot&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then add the ‘askbot’ user to the ‘wheel’ group for sudo command access (not sure what ‘sudo’ is? Learn more about it &lt;a href="https://www.howtoforge.com/tutorial/sudo-beginners-guide/"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;usermod -a -G wheel askbot&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Install AskBot" src="images/7002-4.png"/&gt;&lt;/p&gt;
&lt;p&gt;Now upgrade pip to the latest version and install the python virtualenv package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install --upgrade pip&lt;/span&gt;
&lt;span class="code-line"&gt;pip install virtualenv six&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Install pip" src="images/7002-5.png"/&gt;&lt;/p&gt;
&lt;p&gt;Next. log in as ‘askbot’ user and create new python virtual environment ‘hakase-labs’ with virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;su - askbot&lt;/span&gt;
&lt;span class="code-line"&gt;virtualenv hakase-labs/&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go to the ‘hakase-labs’ directory and activate the virtual environment for Askbot installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; hakase-labs/&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;source&lt;/span&gt; bin/activate&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now install askbot and other python packages with pip command on ‘hakase-labs’ virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install six &lt;/span&gt;
&lt;span class="code-line"&gt;pip install askbot psycopg2&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="installing askbot" src="images/7002-6.png"/&gt;&lt;/p&gt;
&lt;p&gt;Next, create a new directory for the ‘Askbot’ project. Please make sure you don’t use ‘askbot’ as the directory name. In our case, for example, we created a new directory named ‘myapp’&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir myapp/&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go to the myapp directory and run the ‘askbot-setup’ command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; myapp/&lt;/span&gt;
&lt;span class="code-line"&gt;askbot-setup&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The ‘askbot-setup’ command will ask you certain things. For example, you will be asked about directory path to deploy Askbot - you can type ‘.’ and press Enter to continue. Similarly, when asked about database engine, type ‘1’ to use postgresql and press Enter. For database-related details, enter databasename as ‘askbotdb’, database user as ‘hakaselabs’, and password as ‘hakase123’.&lt;/p&gt;
&lt;p&gt;&lt;img alt="configure the application" src="images/7002-7.png"/&gt;&lt;/p&gt;
&lt;p&gt;So Askbot is now installed on the ‘myapp’ directory. Now we need to generate Askbot Django static files and the database.&lt;/p&gt;
&lt;p&gt;Run the command below to generate Askbot Django static files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py collectstatic&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When asked for confirmation, type ‘yes’ and press Enter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="python manage.py" src="images/7002-8.png"/&gt;&lt;/p&gt;
&lt;p&gt;Now, to generate the database, run syncdb as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py syncdb&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be asked about creating the admin user and password. So when asked, type the username, email, and password for admin configuration.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create admin user" src="images/7002-9.png"/&gt;&lt;/p&gt;
&lt;p&gt;So by now, Askbot has been installed, static files have been generated, and the database configuration has been completed.&lt;/p&gt;
&lt;p&gt;You can test the Askbot installation with runserver command below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python manage.py runserver &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8080&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open your Web browser and type the server &lt;span class="caps"&gt;IP&lt;/span&gt; address, and you should see a page similar to the following:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Result in web browser" src="images/7002-10.png"/&gt;&lt;/p&gt;
&lt;h1 id="step-4-install-and-configure-uwsgi"&gt;Step 4 - Install and configure uWSGI&lt;a class="headerlink" href="#step-4-install-and-configure-uwsgi" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We will be using uWSGI as service for the Askbot Django project. Specifically, we will be using uWSGI with Nginx web server for the Askbot installation. So let’s begin.&lt;/p&gt;
&lt;p&gt;Firstly, install uWSGI using the pip command, as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo pip install uwsgi&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After the installation is complete, create a new directory for the uWSGI virtual host files. For example, in our case, we created ‘/etc/uwsgi/sites’.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p /etc/uwsgi/sites&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go to the newly-created directory and create new askbot uWSGI configuration with vim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/uwsgi/sites&lt;/span&gt;
&lt;span class="code-line"&gt;vim askbot.ini&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Paste the following configuration in the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="c1"&gt;# Project directory, Python directory&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/askbot/hakase-labs/myapp&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; home = /home/askbot/hakase-labs/&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; static-map = /m=/home/askbot/hakase-labs/myapp/static&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; wsgi-file = /home/askbot/hakase-labs/myapp/django.wsgi&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="na"&gt;master&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; processes = 5&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="c1"&gt;# Askbot will running under the sock file&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="na"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/run/uwsgi/askbot.sock&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; chmod-socket = 664&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; uid = askbot&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; gid = nginx&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; vacuum = true&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="c1"&gt;# uWSGI Log file&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="na"&gt;logto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/uwsgi.log&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s it. Save the file and exit from the editor.&lt;/p&gt;
&lt;p&gt;Next, add new uWSGI service script file to the ‘/etc/systemd/system’ directory. Go to the directory and create the ‘uwsgi.service’ file with vim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/systemd/system/&lt;/span&gt;
&lt;span class="code-line"&gt;vim uwsgi.service&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Paste the following uWSGI service configuration in the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;uWSGI Emperor service&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="k"&gt;[Service]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="na"&gt;ExecStartPre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/bin/bash -c 'mkdir -p /run/uwsgi; chown askbot:nginx /run/uwsgi'&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; ExecStart=/bin/uwsgi --emperor /etc/uwsgi/sites&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; Restart=always&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; KillSignal=SIGQUIT&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; Type=notify&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="s"&gt; NotifyAccess=all&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="k"&gt;[Install]&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt; &lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and exit.&lt;/p&gt;
&lt;p&gt;Now, reload systemd services and enable uWSGI to start automatically at the boot time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl daemon-reload&lt;/span&gt;
&lt;span class="code-line"&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; uwsgi&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="Reload services" src="images/7002-11.png"/&gt;&lt;/p&gt;
&lt;p&gt;So with this, uWSGI has been installed, and you should see it running as a service.&lt;/p&gt;
&lt;h1 id="step-5-install-and-configure-nginx-webserver"&gt;Step 5 - Install and configure Nginx webserver&lt;a class="headerlink" href="#step-5-install-and-configure-nginx-webserver" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;So, Askbot is now installed, and it’s running under uWSGI sock file ‘askbot.sock’. In this step, we will be using Nginx web server as a reverse proxy for uWSGI application ‘Askbot’.&lt;/p&gt;
&lt;p&gt;To begin with, install Nginx with the yum command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;yum -y install nginx&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now go to the Nginx ‘conf.d’ directory and create new virtual host file ‘askbot.conf’ with the vim editor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/nginx/conf.d/&lt;/span&gt;
&lt;span class="code-line"&gt;vim askbot.conf&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="install nginx" src="images/7002-12.png"/&gt;&lt;/p&gt;
&lt;p&gt;Paste the following Askbot Nginx configuration in the file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;server {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;         listen 80;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;         server_name askbot.me www.askbot.me;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;         location / {&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;         include         uwsgi_params;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;         uwsgi_pass      unix:/run/uwsgi/askbot.sock;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;    }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt; }&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the file and exit from the editor. Now, test the configuration to make sure there is no error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nginx -t&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, start Nginx and uWSGI services.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl start nginx&lt;/span&gt;
&lt;span class="code-line"&gt;systemctl start uwsgi&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And enable them to start automatically at the boot time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nginx&lt;/span&gt;
&lt;span class="code-line"&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; uwsgi&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img alt="test nginx config and restart nginx" src="images/7002-13.png"/&gt;&lt;/p&gt;
&lt;p&gt;So Nginx is now installed as a reverse proxy for uWSGI application ‘Askbot’.&lt;/p&gt;
&lt;h1 id="step-6-test-the-setup"&gt;Step 6 - Test the setup&lt;a class="headerlink" href="#step-6-test-the-setup" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Open your web browser and visit the Askbot domain name: askbot.me, and you will get to see the home page, as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="askbot domain" src="images/7002-14.png"/&gt;&lt;/p&gt;
&lt;p&gt;Here’s the Askbot user login page:&lt;/p&gt;
&lt;p&gt;&lt;img alt="askbot login" src="images/7002-15.png"/&gt;&lt;/p&gt;
&lt;p&gt;Askbot user dashboard:&lt;/p&gt;
&lt;p&gt;&lt;img alt="askbot dashboard" src="images/7002-16.png"/&gt;&lt;/p&gt;
&lt;p&gt;Askbot admin setting:&lt;/p&gt;
&lt;p&gt;&lt;img alt="askbot admin dashboard" src="images/7002-17.png"/&gt;&lt;/p&gt;
&lt;p&gt;Askbot Django admin login:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Django admin login" src="images/7002-18.png"/&gt;&lt;/p&gt;
&lt;p&gt;Askbot Django admin dashboard:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Django admin dashboard" src="images/7002-19.png"/&gt;&lt;/p&gt;
&lt;p&gt;So the Q&amp;amp;A system application ‘Askbot’ has been successfully installed with uWSGI and Nginx web server on CentOS 7 server.&lt;/p&gt;
&lt;h1 id="reference"&gt;Reference&lt;a class="headerlink" href="#reference" title="Permanent link"&gt; &lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;https://askbot.org/en/&lt;/li&gt;
&lt;/ul&gt;</content><category term="nginx"></category><category term="nginx"></category><category term="uWSGI"></category><category term="PostgreSQL"></category><category term="python"></category><category term="Q&amp;A"></category><category term="askbot"></category><category term="centos"></category></entry><entry><title>Nginx 配置跨域请求 Access-Control-Allow-Origin *</title><link href="/nginx-access-control-allow-origin" rel="alternate"></link><published>2020-01-28T16:36:00+08:00</published><updated>2020-01-28T16:36:00+08:00</updated><author><name>doobom</name></author><id>tag:None,2020-01-28:/nginx-access-control-allow-origin</id><summary type="html">&lt;p&gt;nginx&amp;nbsp;跨域请求&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;原文: &lt;a href="https://segmentfault.com/a/1190000012550346"&gt;https://segmentfault.com/a/1190000012550346&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者:&amp;nbsp;Developer&lt;/p&gt;
&lt;p&gt;本作品系 原作者原创 ， 采用&lt;a href="https://creativecommons.org/licenses/by-nc-nd/4.0/"&gt;《署名-非商业性使用-禁止演绎 4.0&amp;nbsp;国际》许可协议&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当出现 &lt;code&gt;403&lt;/code&gt; 跨域错误的时候 &lt;code&gt;No 'Access-Control-Allow-Origin' header is present on the requested resource&lt;/code&gt;，需要给 Nginx 服务器配置响应的 &lt;code&gt;header&lt;/code&gt;参数：&lt;/p&gt;
&lt;h2 id="_1"&gt;一、 解决方案&lt;a class="headerlink" href="#_1" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;只需要在Nginx的配置文件中配置以下参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;  &lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="k"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Origin&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="k"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Methods&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET, POST, OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="n"&gt;add_header&lt;/span&gt; &lt;span class="k"&gt;Access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Headers&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;request_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="err"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面配置代码即可解决问题了，不想深入研究的，看到这里就可以啦=-=&lt;/p&gt;
&lt;h2 id="_2"&gt;二、 解释&lt;a class="headerlink" href="#_2" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&amp;nbsp;Access-Control-Allow-Origin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器默认是不被允许跨域的。给 Nginx 服务器配置&lt;code&gt;Access-Control-Allow-Origin *&lt;/code&gt;后，表示服务器可以接受所有的请求源（Origin）,即接受所有跨域的请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Access-Control-Allow-Headers&amp;nbsp;是为了防止出现以下错误：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个错误表示当前请求 &lt;code&gt;Content-Type&lt;/code&gt; 的值不被支持。其实是我们发起了 &lt;code&gt;application/json&lt;/code&gt; 的类型请求导致的。这里涉及到一个概念：预检请求（preflight&amp;nbsp;request）,请看下面&amp;#8221;预检请求&amp;#8221;的介绍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Access-Control-Allow-Methods&amp;nbsp;是为了防止出现以下错误：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;4.给 &lt;code&gt;OPTIONS&lt;/code&gt; 添加 &lt;code&gt;204&lt;/code&gt; 的返回，是为了处理在发送 &lt;span class="caps"&gt;POST&lt;/span&gt; 请求时 Nginx&amp;nbsp;依然拒绝访问的错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发送&amp;#8221;预检请求&amp;#8221;时，需要用到方法 &lt;code&gt;OPTIONS&lt;/code&gt; ,所以服务器需要允许该方法。&lt;/p&gt;
&lt;h2 id="preflight-request"&gt;三、 预检请求（preflight request）&lt;a class="headerlink" href="#preflight-request" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;其实上面的配置涉及到了一个 &lt;span class="caps"&gt;W3C&lt;/span&gt; 标准： &lt;code&gt;CROS&lt;/code&gt;,全称是跨域资源共享 (Cross-origin resource&amp;nbsp;sharing)，它的提出就是为了解决跨域请求的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;跨域资源共享(&lt;span class="caps"&gt;CORS&lt;/span&gt;)标准新增了一组 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 首部字段，允许服务器声明哪些源站有权限访问哪些资源。另外，规范要求，&lt;strong&gt;对那些可能对服务器数据产生副作用的HTTP 请求方法（特别是 &lt;span class="caps"&gt;GET&lt;/span&gt; 以外的 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 请求，或者搭配某些 &lt;span class="caps"&gt;MIME&lt;/span&gt; 类型的 &lt;span class="caps"&gt;POST&lt;/span&gt; 请求）&lt;/strong&gt;，浏览器必须首先使用 &lt;span class="caps"&gt;OPTIONS&lt;/span&gt; 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 &lt;span class="caps"&gt;HTTP&lt;/span&gt; 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;认证相关数据）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;其实 &lt;code&gt;Content-Type&lt;/code&gt; 字段的类型为 &lt;code&gt;application/json&lt;/code&gt; 的请求就是上面所说的搭配某些 &lt;code&gt;MIME&lt;/code&gt; 类型的 &lt;code&gt;POST&lt;/code&gt; 请求,&lt;span class="caps"&gt;CORS&lt;/span&gt; 规定，&lt;code&gt;Content-Type&lt;/code&gt; 不属于以下 &lt;code&gt;MIME&lt;/code&gt; 类型的，都属于预检请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/span&gt;
&lt;span class="code-line"&gt;multipart/form-data&lt;/span&gt;
&lt;span class="code-line"&gt;text/plain&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以 &lt;code&gt;application/json&lt;/code&gt; 的请求 会在正式通信之前，增加一次&amp;#8221;预检&amp;#8221;请求，这次&amp;#8221;预检&amp;#8221;请求会带上头部信息 &lt;code&gt;Access-Control-Request-Headers: Content-Type&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;OPTIONS /api/test HTTP/1.1&lt;/span&gt;
&lt;span class="code-line"&gt;Origin: http://foo.example&lt;/span&gt;
&lt;span class="code-line"&gt;Access-Control-Request-Method: POST&lt;/span&gt;
&lt;span class="code-line"&gt;Access-Control-Request-Headers: Content-Type&lt;/span&gt;
&lt;span class="code-line"&gt;... 省略了一些&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;服务器回应时，返回的头部信息如果不包含 &lt;code&gt;Access-Control-Allow-Headers: Content-Type&lt;/code&gt; 则表示不接受非默认的的 &lt;code&gt;Content-Type&lt;/code&gt;。即出现以下错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Request header field Content-Type is not allowed by Access-Control-Allow-Headers in preflight response.&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_3"&gt;参考文章：&lt;a class="headerlink" href="#_3" title="Permanent link"&gt; &lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/04/cors.html"&gt;阮一峰【跨域资源共享 &lt;span class="caps"&gt;CORS&lt;/span&gt;&amp;nbsp;详解】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/zh-CN/"&gt;&lt;span class="caps"&gt;MDN&lt;/span&gt; web docs【HTTP访问控制（&lt;span class="caps"&gt;CORS&lt;/span&gt;）】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="nginx"></category><category term="nginx"></category><category term="header"></category><category term="cors"></category><category term="cross-site"></category></entry></feed>